<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Artifactory is a binaries repository manager.
  ~ Copyright (C) 2018 JFrog Ltd.
  ~
  ~ Artifactory is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ Artifactory is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with Artifactory.  If not, see <http://www.gnu.org/licenses/>.
  -->
<!--suppress SpringXmlModelInspection -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!-- password decrypting authentication manager for passwords decryption if feature is active -->
    <bean id="passwordDecryptingManager" class="org.artifactory.security.PasswordDecryptingManager">
        <property name="delegate" ref="authenticationManager"/>
        <property name="delegateProps" ref="propsAuthenticationProvider"/>
        <property name="delegateAccessToken" ref="accessTokenAuthenticationProvider"/>
    </bean>

    <bean class="org.artifactory.webapp.servlet.authentication.ArtifactoryAccessTokenAuthenticationFilter">
        <constructor-arg ref="passwordDecryptingManager"/>
    </bean>
    <!-- register artifactory authentication filters -->
    <bean class="org.artifactory.webapp.servlet.authentication.ArtifactoryBasicAuthenticationFilter"/>
    <bean class="org.artifactory.webapp.servlet.authentication.ArtifactoryRememberMeFilter"/>
    <bean id="mavenForceAuthenticationFilter"
          class="org.artifactory.webapp.servlet.authentication.OssForceAuthenticationFilter" primary="false"/>

    <!-- register artifactory authentication interceptors -->
    <bean class="org.artifactory.webapp.servlet.authentication.interceptor.anonymous.AnonymousLoginInterceptor"/>
    <bean class="org.artifactory.webapp.servlet.authentication.interceptor.anonymous.AnonymousPingInterceptor"/>
    <bean class="org.artifactory.webapp.servlet.authentication.interceptor.anonymous.AnonymousRefreshTokenRequestInterceptor"/>
    <bean class="org.artifactory.webapp.servlet.authentication.interceptor.anonymous.AnonymousNpmLoginInterceptor"/>

    <!-- create the spring basic authentication filter (will be used as a delegate) -->
    <bean id="basicAuthenticationFilter"
          class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <constructor-arg ref="passwordDecryptingManager"/>
        <constructor-arg ref="basicAuthenticationEntryPoint"/>
        <property name="authenticationDetailsSource">
            <bean class="org.artifactory.security.HttpAuthenticationDetailsSource"/>
        </property>
    </bean>

    <!-- props auth security related (filter and authentication)  -->
    <bean id="propsAuthenticationFilter"
          class="org.artifactory.webapp.servlet.authentication.PropsAuthenticationFilter">
        <constructor-arg ref="passwordDecryptingManager"/>
        <constructor-arg ref="basicAuthenticationEntryPoint"/>
    </bean>

    <bean id="propsAuthenticationProvider"
          class="org.artifactory.security.db.apikey.PropsAuthenticationProvider"/>

    <bean id="accessTokenAuthenticationProvider"
          class="org.artifactory.security.access.AccessTokenAuthenticationProvider"/>

    <bean id="basicAuthenticationEntryPoint"
          class="org.artifactory.webapp.servlet.authentication.ArtifactoryBasicAuthenticationEntryPoint">
    </bean>

    <!-- create authentication providers -->

    <bean id="dbAuthenticationProvider" class="org.artifactory.security.db.DbAuthenticationProvider">
        <property name="userDetailsService" ref="dbUserDetailsService"/>
        <!--<property name="saltSource" ref="dbUserDetailsService"/>-->
        <property name="passwordEncoder" ref="passwordEncoder"/>
    </bean>

    <!-- authentication providers order is important. keep internal provider after ldap and sso -->
    <bean id="authenticationManager" class="org.artifactory.security.RealmAwareAuthenticationManager">
        <property name="eraseCredentialsAfterAuthentication" value="false"/>
        <constructor-arg>
            <list>
                <ref bean="ldapAuthenticationProvider"/>
                <ref bean="crowdAuthenticationProviderAdapter"/>
                <ref bean="accessAuthenticationProvider"/>
                <ref bean="dbAuthenticationProvider"/>
                <ref bean="rememberMeAuthenticationProvider"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.password.MessageDigestPasswordEncoder">
        <constructor-arg value="MD5"/>
    </bean>

    <bean id="rememberMeProcessingFilter"
          class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
        <constructor-arg ref="rememberMeServices"/>
        <constructor-arg ref="authenticationManager"/>
    </bean>

    <bean id="rememberMeAuthenticationProvider"
          class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
        <constructor-arg value="artifactory"/>
    </bean>
</beans>