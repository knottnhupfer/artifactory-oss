/*
 *
 * Artifactory is a binaries repository manager.
 * Copyright (C) 2018 JFrog Ltd.
 *
 * Artifactory is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 * Artifactory is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Artifactory.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.artifactory.addon.build;

import org.artifactory.addon.Addon;
import org.artifactory.addon.build.artifacts.ProducedBy;
import org.artifactory.addon.build.artifacts.UsedBy;
import org.artifactory.addon.license.EdgeBlockedAddon;
import org.artifactory.api.common.BasicStatusHolder;
import org.artifactory.api.rest.build.artifacts.BuildArtifactsRequest;
import org.artifactory.api.rest.build.diff.BuildsDiff;
import org.artifactory.build.ArtifactoryBuildArtifact;
import org.artifactory.build.BuildRun;
import org.artifactory.fs.FileInfo;
import org.artifactory.sapi.common.Lock;
import org.jfrog.build.api.BaseBuildFileBean;
import org.jfrog.build.api.Build;
import org.jfrog.build.api.BuildRetention;
import org.jfrog.build.api.dependency.BuildPatternArtifacts;
import org.jfrog.build.api.dependency.BuildPatternArtifactsRequest;
import org.jfrog.build.api.release.BuildArtifactsMapping;

import javax.annotation.Nonnull;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Addon for continuous integration info handling
 *
 * @author Noam Y. Tenne
 */
@EdgeBlockedAddon
public interface BuildAddon extends Addon {

    String PROP_BUILD_NAME = "build.name";

    /**
     * Used for creation of repo only.
     * In order to retrieve the *current* Build Info repository use InternalBuildService#getBuildInfoRepoKey()
     */
    String BUILD_INFO_REPO_NAME = "artifactory-build-info";

    /**
     * Returns a mapping of file info to artifact for all artifacts in this build, will return artifacts that were not
     * directly involved in the build (but same checksum!) if the build's artifacts themselves were'nt found based on
     * their properties.
     * NOTE: a mapping might be null if the artifact does not exist in artifactory
     *
     * @param build The searched build
     * @return file beans and file infos
     */
    Set<ArtifactoryBuildArtifact> getBuildArtifactsFileInfosWithFallback(Build build, List<String> repoToSearch);

    /**
     * Searches for artifacts with build name properties that contain 'from' as a value and renames them to 'to'
     *
     * @param from Build name property value to search for
     * @param to   Replacement build name
     */
    @Lock
    void renameBuildNameProperty(String from, String to);

    BasicStatusHolder discardOldBuilds(String buildName, BuildRetention buildRetention, boolean async);

    /**
     * Returns the built artifacts matching the request
     *
     * @param buildPatternArtifactsRequest contains build name and build number or keyword
     * @param servletContextUrl            for building urls of current Artifactory instance
     * @return artifacts generated by the build
     */
    BuildPatternArtifacts getBuildPatternArtifacts(@Nonnull BuildPatternArtifactsRequest buildPatternArtifactsRequest,
            String servletContextUrl);

    /**
     * Returns build artifacts map according to the param input regexp patterns.
     *
     * @param buildArtifactsRequest A wrapper which contains the necessary parameters
     * @return A map from {@link FileInfo}s to their target directories relative paths
     * @see BuildArtifactsRequest
     */
    Map<FileInfo, String> getBuildArtifacts(BuildArtifactsRequest buildArtifactsRequest);

    /**
     * Returns an archive file according to the param archive type (zip/tar/tar.gz/tgz) which contains
     * all build artifacts according to the given build name and number (can be latest or latest by status).
     *
     * @param buildArtifactsRequest A wrapper which contains the necessary parameters
     * @return The archived file of build artifacts with their hierarchy rules
     * @see BuildArtifactsRequest
     */
    File getBuildArtifactsArchive(BuildArtifactsRequest buildArtifactsRequest) throws IOException;

    /**
     * Returns diff object between two given builds (same build name, different numbers)
     *
     * @param firstBuild         The first build to compare, must be newer than the second build
     * @param secondBuild        The second build to compare against
     * @param baseStorageInfoUri Base storage uri
     */
    BuildsDiff getBuildsDiff(Build firstBuild, Build secondBuild, String baseStorageInfoUri);

    /**
     * return artifact or dependency file info (in order to get repo path)
     *
     * @param artifact - artifact or dependency  (to get file info for)
     * @param build    - build data
     * @return file info instance of artifact or dependency
     */
    FileInfo getFileBeanInfo(BaseBuildFileBean artifact, Build build);

    /**
     * return {@link FileInfo}s mapped to their target path
     *
     * @param fileInfos The {@link FileInfo}s to map
     * @param mapping The input and output to map by
     * @return Map of {@link FileInfo}s mapped to their target path
     */
    Map<FileInfo, String> mapBuildArtifactsToOutputPaths(Set<FileInfo> fileInfos, BuildArtifactsMapping mapping);

    /**
     * return filtered {@link FileInfo}s
     * @param buildArtifacts The build artifacts to filter
     * @param mapping The pattern to filter by
     * @return set of {@link FileInfo}s
     */
    Set<FileInfo> filterBuildArtifactsByPattern(Set<FileInfo> buildArtifacts, BuildArtifactsMapping mapping);

    /**
     * *UI USAGE*
     *
     * Populates {@param producedByList} and {@param usedByList} with data about builds that produced and depended on
     * {@param artifact} respectively.
     */
    void populateArtifactBuildInfo(FileInfo artifact, List<BuildRun> dependencyBuilds, List<BuildRun> producedByBuilds, List<ProducedBy> producedByList, List<UsedBy> usedByList);
}