/*
 *
 * Artifactory is a binaries repository manager.
 * Copyright (C) 2018 JFrog Ltd.
 *
 * Artifactory is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 * Artifactory is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Artifactory.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.artifactory.addon.conan;

import org.artifactory.addon.Addon;
import org.artifactory.addon.conan.info.ConanPackageInfo;
import org.artifactory.addon.conan.info.ConanRecipeInfo;
import org.artifactory.repo.RepoPath;
import org.artifactory.sapi.fs.VfsItem;

import javax.annotation.Nonnull;

/**
 * @author Yinon Avraham
 */
public interface ConanAddon extends Addon {

    /**
     * Check whether the given repo path is a conan reference folder
     * @param repoPath the repo path to check
     * @return {@code true} if the repo path is a conan reference folder, {@code false} otherwise
     */
    default boolean isConanReferenceFolder(@Nonnull RepoPath repoPath) {
        return false;
    }

    /**
     * Check whether the given repo path is a conan binary package folder
     * @param repoPath the repo path to check
     * @return {@code true} if the repo path is a conan binary package folder, {@code false} otherwise
     */
    default boolean isConanPackageFolder(@Nonnull RepoPath repoPath) {
        return false;
    }

    /**
     * Get the information of the conan recipe under the given repo path
     * @param repoPath the repo path under which the recipe is expected
     * @return the conan recipe information
     * @throws IllegalArgumentException if a recipe does not exist under the given repo path
     * @see #isConanReferenceFolder(RepoPath)
     * @see #isConanPackageFolder(RepoPath)
     */
    @Nonnull
    default ConanRecipeInfo getRecipeInfo(@Nonnull RepoPath repoPath) {
        throw new IllegalArgumentException("Not supported");
    }

    /**
     * Get the information of the conan binary package under the given repo path
     * @param repoPath the repo path under which the binary package is expected
     * @return the conan binary package information
     * @throws IllegalArgumentException if a binary package does not exist under the given repo path
     * @see #isConanPackageFolder(RepoPath)
     */
    @Nonnull
    default ConanPackageInfo getPackageInfo(@Nonnull RepoPath repoPath) {
        throw new IllegalArgumentException("Not supported");
    }

    /**
     * Count the conan binary packages under the given path
     * @param repoPath the repo path under which to count the packages
     * @return the number of packages
     */
    default int countPackages(@Nonnull RepoPath repoPath) {
        return 0;
    }

    /**
     * Adds the .timestamp artifact into a map of artifacts per index file to be handled by work queue.
     *
     * Sends an indexing event to work queue with a unique key of repo key + index folder, so all relevant events will
     * be handled together.
     *
     * @param fsItem path of ".timestamp" file generated by Conan recipe/package deployment.
     */
    default void addConanPackage(VfsItem fsItem) {
        throw new IllegalArgumentException("Not supported");
    }

    /**
     * Adds the .timestamp artifact into a map of artifacts per index file to be handled by work queue.
     *
     * Sends an indexing event to work queue with a unique key of repo key + index folder, so all relevant events will
     * be handled together.
     */
    default void removeConanPackage(VfsItem fsItem) {
        throw new IllegalArgumentException("Not supported");
    }

    /**
     * Request Conan metadata calculation of the entire repo.
     *
     * Generates a list of all the index locations in the {@param repoKey} and generates a work queue request
     * per index location, to be later generated in parallel.
     */
    default void reindexRepo(String repoKey) {
        throw new IllegalArgumentException("Not supported");
    }

}
